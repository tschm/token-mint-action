name: 'PyPI Token Mint'
description: 'Create API token'

inputs:
  audience:
    description: 'audience'
    default: 'pypi'

outputs:
  api-token:
    description: 'api token'
    value: '${{ steps.mint.outputs.api-token }}'

runs:
  using: composite

  steps:
    - id: mint
      shell: bash
      run: |
        env_vars_found=true
        if [[ -z $ACTIONS_ID_TOKEN_REQUEST_TOKEN ]]; then
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN is not defined."
          env_vars_found=false
        elif [[ -z $ACTIONS_ID_TOKEN_REQUEST_URL ]]; then
          echo "ACTIONS_ID_TOKEN_REQUEST_URL is not defined."
          env_vars_found=false
        fi

        if [[ $env_vars_found == false ]]; then
          echo "Make sure that:"
          echo "a) Permission are set correctly"
          echo "b) The .yml is registered as a trusted publisher"
          echo "See https://github.com/tschm/token-mint-action/blob/main/README.md."
          exit 1
        fi

        resp=$(curl -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                       "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${{ inputs.audience }}")

        # extract the token from the response
        oidc_token=$(jq -r '.value' <<< "${resp}")

        # and move the token into json format
        oidc_token="{\"token\":\"${oidc_token}\"}"

        # use the oidc token to request an api token
        resp=$(curl -X POST https://pypi.org/_/oidc/github/mint-token -d $oidc_token)

        # extract the token from the response
        api_token=$(jq -r '.token' <<< "${resp}")

        # mask the newly minted API token, so that we don't accidentally leak it
        echo "::add-mask::${api_token}"

        echo "api-token=$api_token" >> $GITHUB_OUTPUT
